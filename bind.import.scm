;;;; bind.import.scm - GENERATED BY CHICKEN 4.8.0.3 -*- Scheme -*-

(eval '(import scheme chicken foreign))
(import bind-translator srfi-1 srfi-13 utils)
(##core#begin (require-library bind-translator))
(##core#begin
  (define (bind:read-file f)
    (let ((fname (cond ((string? f) f)
                       ((symbol? f) (symbol->string (strip-syntax f)))
                       (else (syntax-error 'bind-file "invalid filename" f)))))
      (read-all fname))))
(##sys#register-compiled-module
  'bind
  (list)
  '()
  (list (cons 'bind-rename/pattern
              (##sys#er-transformer
                (##core#lambda
                  (x r c)
                  (if (= 2 (length (cdr x)))
                    (apply set-renaming
                           (append (strip-syntax (cdr x)) '(regex: #t)))
                    (syntax-error 'bind-rename "bad number of arguments" x))
                  `(,(r 'void)))))
        (cons 'bind-rename
              (##sys#er-transformer
                (##core#lambda
                  (x r c)
                  (if (= 2 (length (cdr x)))
                    (apply set-renaming (strip-syntax (cdr x)))
                    (syntax-error 'bind-rename "bad number of arguments" x))
                  `(,(r 'void)))))
        (cons 'bind-options
              (##sys#er-transformer
                (##core#lambda
                  (x r c)
                  (apply set-bind-options (strip-syntax (cdr x)))
                  `(,(r 'void)))))
        (cons 'bind-opaque-type
              (##sys#er-transformer
                (##core#lambda
                  (x r c)
                  (parse-opaque-type-declaration (cdr x) r))))
        (cons 'bind-type
              (##sys#er-transformer
                (##core#lambda (x r c) (parse-type-declaration (cdr x) r))))
        (cons 'bind-include-path
              (lambda (x r c)
                (set! ffi-include-path-list
                  (append (cdr x) ffi-include-path-list))
                `(,(r 'void))))
        (cons 'bind-file*
              (##sys#er-transformer
                (##core#lambda
                  (x r c)
                  `(,(r 'bind*) ,@(map bind:read-file (cdr x))))))
        (cons 'bind-file
              (##sys#er-transformer
                (##core#lambda
                  (x r c)
                  `(,(r 'bind) ,@(map bind:read-file (cdr x))))))
        (cons 'bind*
              (lambda (x r c)
                (let ((strs (append (cdr x) '("\n"))))
                  `(,(r 'begin)
                    (,(r 'declare) (foreign-declare ,@strs))
                    (,(r 'bind) ,@strs)))))
        (cons 'bind
              (lambda (x r c)
                (let ((strs (append (cdr x) '("\n"))))
                  `(,(r 'begin)
                    ,@(parse-easy-ffi (string-concatenate strs) r))))))
  (list))

;; END OF FILE
